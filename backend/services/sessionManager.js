import { Session } from '../models/index.js';
import { 
  createWhatsappJsSession, 
  getWhatsappJsSession,
  listSessions as listWhatsappJsSessions 
} from './whatsappjsService.js';
import { 
  createBaileysSession, 
  getBaileysSession,
  listBaileysSessions 
} from './baileysService.js';
import { emitToAll } from './socket.js';
import { 
  createWhatsappJsMessageCallback,
  createBaileysMessageCallback 
} from './messageCallbacks.js';

// Fun√ß√£o para verificar se uma sess√£o est√° realmente ativa
const isSessionActuallyActive = (whatsappId, library) => {
  try {
    if (library === 'whatsappjs') {
      const session = getWhatsappJsSession(whatsappId);
      return session && session.info && session.info.wid;
    } else if (library === 'baileys') {
      const session = getBaileysSession(whatsappId);
      return session && session.user;
    }
    return false;
  } catch (error) {
    return false;
  }
};

// Fun√ß√£o para reativar uma sess√£o espec√≠fica
const reactivateSession = async (session) => {
  try {
    console.log(`üîÑ Reativando sess√£o ${session.whatsappId} (${session.library}) com callbacks de m√≠dia...`);
    
    if (session.library === 'whatsappjs') {
      // Criar callback para processamento de mensagens
      const onMessage = createWhatsappJsMessageCallback(session);
      // WhatsApp.js: (sessionId, onReady, onMessage)
      await createWhatsappJsSession(session.whatsappId, null, onMessage);
    } else if (session.library === 'baileys') {
      // Criar callback para processamento de mensagens
      const onMessage = createBaileysMessageCallback(session);
      // Baileys: (sessionId, onQR, onReady, onMessage)
      await createBaileysSession(session.whatsappId, null, null, onMessage);
    }
    
    console.log(`‚úÖ Sess√£o ${session.whatsappId} reativada com sucesso com callbacks de mensagens e m√≠dia`);
    return true;
  } catch (error) {
    console.error(`‚ùå Erro ao reativar sess√£o ${session.whatsappId}:`, error.message);
    
    // Atualizar status no banco para disconnected
    await session.update({ status: 'disconnected' });
    
    return false;
  }
};

// Fun√ß√£o para sincronizar status de todas as sess√µes
export const syncAllSessions = async () => {
  try {
    console.log('üîÑ Sincronizando status de todas as sess√µes...');
    
    const sessions = await Session.findAll();
    let reconnectedCount = 0;
    let disconnectedCount = 0;
    
    for (const session of sessions) {
      const isActive = isSessionActuallyActive(session.whatsappId, session.library);
      
      if (session.status === 'connected' && !isActive) {
        console.log(`‚ö†Ô∏è Sess√£o ${session.whatsappId} est√° marcada como conectada mas n√£o est√° ativa`);
        
        // Tentar reativar
        const reactivated = await reactivateSession(session);
        
        if (reactivated) {
          reconnectedCount++;
        } else {
          disconnectedCount++;
        }
      } else if (session.status === 'connected' && isActive) {
        console.log(`‚úÖ Sess√£o ${session.whatsappId} est√° ativa e conectada`);
      } else if (session.status === 'disconnected') {
        console.log(`üîå Sess√£o ${session.whatsappId} est√° desconectada (normal)`);
      }
    }
    
    console.log(`üìä Sincroniza√ß√£o conclu√≠da:`);
    console.log(`   - ${reconnectedCount} sess√µes reconectadas`);
    console.log(`   - ${disconnectedCount} sess√µes desconectadas`);
    
    // Emitir atualiza√ß√£o via WebSocket
    emitSessionsUpdate();
    
  } catch (error) {
    console.error('‚ùå Erro ao sincronizar sess√µes:', error);
  }
};

// Fun√ß√£o para emitir atualiza√ß√µes de sess√µes
const emitSessionsUpdate = async () => {
  try {
    const sessions = await Session.findAll({
      order: [['createdAt', 'DESC']]
    });

    const sessionsWithStatus = sessions.map(session => ({
      ...session.toJSON(),
      currentStatus: session.status
    }));

    console.log('üîÑ Emitindo atualiza√ß√£o de sess√µes via WebSocket ap√≥s sincroniza√ß√£o');
    emitToAll('sessions-update', sessionsWithStatus);
  } catch (error) {
    console.error('‚ùå Erro ao emitir atualiza√ß√£o de sess√µes:', error);
  }
};

// Fun√ß√£o para verificar sess√µes periodicamente (a cada 5 minutos)
export const startSessionHealthCheck = () => {
  console.log('üè• Iniciando verifica√ß√£o de sa√∫de das sess√µes (a cada 5 minutos)...');
  
  setInterval(async () => {
    console.log('üè• Executando verifica√ß√£o de sa√∫de das sess√µes...');
    await syncAllSessions();
  }, 5 * 60 * 1000); // 5 minutos
};

// Fun√ß√£o para reconectar automaticamente sess√µes ao iniciar
export const autoReconnectSessions = async () => {
  try {
    console.log('üöÄ Iniciando reconex√£o autom√°tica de sess√µes...');
    
    const sessions = await Session.findAll({
      where: { status: 'connected' }
    });
    
    if (sessions.length === 0) {
      console.log('üì± Nenhuma sess√£o para reconectar');
      return;
    }
    
    console.log(`üì± Encontradas ${sessions.length} sess√µes para reconectar`);
    
    for (const session of sessions) {
      console.log(`üîÑ Tentando reconectar sess√£o ${session.whatsappId}...`);
      
      // Aguardar um pouco entre tentativas para n√£o sobrecarregar
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      await reactivateSession(session);
    }
    
    console.log('‚úÖ Reconex√£o autom√°tica conclu√≠da');
    
  } catch (error) {
    console.error('‚ùå Erro na reconex√£o autom√°tica:', error);
  }
};
