import { Session } from '../models/index.js';
import { 
  createWhatsappJsSession, 
  getWhatsappJsSession,
  listSessions as listWhatsappJsSessions 
} from './whatsappjsService.js';
import { 
  createBaileysSession, 
  getBaileysSession,
  listBaileysSessions 
} from './baileysService.js';
import { emitToAll } from './socket.js';
const { 
  handleWhatsappJsMessage,
  handleBaileysMessage 
} = await import('./messageCallbacks.js');

// Fun√ß√£o para verificar se uma sess√£o est√° realmente ativa
const isSessionActuallyActive = async (whatsappId, library) => {
  try {
    console.log(`üîç Verificando se sess√£o ${whatsappId} (${library}) est√° realmente ativa...`);

    if (library === 'whatsappjs') {
      const session = await getWhatsappJsSession(whatsappId);
      const isActive = session && session.info && session.info.wid;

      console.log(`üì± WhatsApp.js - Sess√£o encontrada: ${!!session}`);
      console.log(`üì± WhatsApp.js - Tem info: ${!!(session && session.info)}`);
      console.log(`üì± WhatsApp.js - Tem wid: ${!!(session && session.info && session.info.wid)}`);
      console.log(`üì± WhatsApp.js - Status final: ${isActive ? 'ATIVA' : 'INATIVA'}`);

      return isActive;
    } else if (library === 'baileys') {
      const session = getBaileysSession(whatsappId);
      const isActive = session && session.user;

      console.log(`üì± Baileys - Sess√£o encontrada: ${!!session}`);
      console.log(`üì± Baileys - Tem user: ${!!(session && session.user)}`);
      console.log(`üì± Baileys - Status final: ${isActive ? 'ATIVA' : 'INATIVA'}`);

      return isActive;
    }

    console.log(`‚ùå Biblioteca n√£o reconhecida: ${library}`);
    return false;
  } catch (error) {
    console.error(`‚ùå Erro ao verificar sess√£o ${whatsappId}:`, error.message);
    return false;
  }
};

// Fun√ß√£o para reativar uma sess√£o espec√≠fica
const reactivateSession = async (session) => {
  try {
    console.log(`üîÑ Reativando sess√£o ${session.whatsappId} (${session.library}) com callbacks de m√≠dia...`);

    // Verificar se j√° existe uma sess√£o ativa antes de tentar reativar
    const isAlreadyActive = await isSessionActuallyActive(session.whatsappId, session.library);
    if (isAlreadyActive) {
      console.log(`‚úÖ Sess√£o ${session.whatsappId} j√° est√° ativa, n√£o precisa reativar`);
      return true;
    }

    if (session.library === 'whatsappjs') {
      // Criar callback para processamento de mensagens
      const onMessage = async (message) => {
        await handleWhatsappJsMessage(message, session.id);
      };

      // Verificar se j√° existe uma sess√£o sendo inicializada
      try {
        const existingSession = getWhatsappJsSession(session.whatsappId);
        if (existingSession) {
          console.log(`‚è≥ Sess√£o ${session.whatsappId} j√° existe na lista, aguardando inicializa√ß√£o`);
          return true;
        }
      } catch (error) {
        // Sess√£o n√£o existe, pode prosseguir
        console.log(`üìù Sess√£o ${session.whatsappId} n√£o encontrada na lista, prosseguindo com reativa√ß√£o`);
      }

      // WhatsApp.js: (sessionId, onReady, onMessage)
      await createWhatsappJsSession(session.whatsappId, null, onMessage);
    } else if (session.library === 'baileys') {
      // Criar callback para processamento de mensagens
      const onMessage = async (message) => {
        await handleBaileysMessage(message, session.id);
      };
      // Baileys: (sessionId, onQR, onReady, onMessage)
      await createBaileysSession(session.whatsappId, null, null, onMessage);
    }

    console.log(`‚úÖ Sess√£o ${session.whatsappId} reativada com sucesso com callbacks de mensagens e m√≠dia`);
    return true;
  } catch (error) {
    console.error(`‚ùå Erro ao reativar sess√£o ${session.whatsappId}:`, error.message);

    // Atualizar status no banco para disconnected
    await session.update({ status: 'disconnected' });

    return false;
  }
};

// Fun√ß√£o para sincronizar status de todas as sess√µes
export const syncAllSessions = async () => {
  try {
    console.log('üîÑ Sincronizando status de todas as sess√µes...');

    const sessions = await Session.findAll();
    let reconnectedCount = 0;
    let disconnectedCount = 0;

    for (const session of sessions) {
      console.log(`üîç Verificando sess√£o ${session.whatsappId} (${session.library}) - Status atual: ${session.status}`);

      const isActive = await isSessionActuallyActive(session.whatsappId, session.library);

      if (session.status === 'connected' && !isActive) {
        console.log(`‚ö†Ô∏è Sess√£o ${session.whatsappId} est√° marcada como conectada mas n√£o est√° ativa`);

        // Ser mais conservador: s√≥ tentar reativar se for whatsappjs e se n√£o houver sess√£o na lista
        if (session.library === 'whatsappjs') {
          try {
            // Verificar se existe alguma sess√£o com esse whatsappId na lista
            const hasAnySession = sessions.some(s => s.sessionId === session.whatsappId || s.id === session.id);
            console.log(`üìä Existe alguma sess√£o na lista para ${session.whatsappId}: ${hasAnySession}`);

            if (!hasAnySession) {
              console.log(`üîÑ Tentando reativar sess√£o ${session.whatsappId} (nenhuma sess√£o encontrada na lista)`);
              const reactivated = await reactivateSession(session);

              if (reactivated) {
                reconnectedCount++;
              } else {
                disconnectedCount++;
              }
            } else {
              console.log(`‚è≥ Mantendo sess√£o ${session.whatsappId} (h√° sess√£o na lista, pode estar inicializando)`);
            }
          } catch (error) {
            console.error(`‚ùå Erro ao verificar sess√£o ${session.whatsappId}:`, error.message);
            disconnectedCount++;
          }
        } else {
          console.log(`‚è≥ Mantendo sess√£o Baileys ${session.whatsappId} (n√£o reativar automaticamente)`);
        }
      } else if (session.status === 'connected' && isActive) {
        console.log(`‚úÖ Sess√£o ${session.whatsappId} est√° ativa e conectada`);
      } else if (session.status === 'disconnected') {
        console.log(`üîå Sess√£o ${session.whatsappId} est√° desconectada (normal)`);
      } else {
        console.log(`üìã Sess√£o ${session.whatsappId} tem status: ${session.status}`);
      }
    }

    console.log(`üìä Sincroniza√ß√£o conclu√≠da:`);
    console.log(`   - ${reconnectedCount} sess√µes reconectadas`);
    console.log(`   - ${disconnectedCount} sess√µes desconectadas`);

    // Emitir atualiza√ß√£o via WebSocket
    emitSessionsUpdate();

  } catch (error) {
    console.error('‚ùå Erro ao sincronizar sess√µes:', error);
  }
};

// Fun√ß√£o para emitir atualiza√ß√µes de sess√µes
const emitSessionsUpdate = async () => {
  try {
    const sessions = await Session.findAll({
      order: [['createdAt', 'DESC']]
    });

    const sessionsWithStatus = sessions.map(session => ({
      ...session.toJSON(),
      currentStatus: session.status
    }));

    console.log('üîÑ Emitindo atualiza√ß√£o de sess√µes via WebSocket ap√≥s sincroniza√ß√£o');
    emitToAll('sessions-update', sessionsWithStatus);
  } catch (error) {
    console.error('‚ùå Erro ao emitir atualiza√ß√£o de sess√µes:', error);
  }
};

// Fun√ß√£o para verificar sess√µes periodicamente (a cada 5 minutos)
export const startSessionHealthCheck = () => {
  console.log('üè• Iniciando verifica√ß√£o de sa√∫de das sess√µes (a cada 5 minutos)...');
  
  setInterval(async () => {
    console.log('üè• Executando verifica√ß√£o de sa√∫de das sess√µes...');
    await syncAllSessions();
  }, 5 * 60 * 1000); // 5 minutos
};

// Fun√ß√£o para reconectar automaticamente sess√µes ao iniciar
export const autoReconnectSessions = async () => {
  try {
    console.log('üöÄ Iniciando reconex√£o autom√°tica de sess√µes...');

    const sessions = await Session.findAll({
      where: { status: 'connected' }
    });

    if (sessions.length === 0) {
      console.log('üì± Nenhuma sess√£o para reconectar');
      return;
    }

    console.log(`üì± Encontradas ${sessions.length} sess√µes marcadas como conectadas`);

    for (const session of sessions) {
      console.log(`ÔøΩ Verificando se sess√£o ${session.whatsappId} realmente precisa de reconex√£o...`);

      // Verificar se a sess√£o j√° est√° ativa antes de tentar reconectar
      const isAlreadyActive = await isSessionActuallyActive(session.whatsappId, session.library);

      if (isAlreadyActive) {
        console.log(`‚úÖ Sess√£o ${session.whatsappId} j√° est√° ativa, pulando reconex√£o`);
        continue;
      }

      console.log(`üîÑ Sess√£o ${session.whatsappId} n√£o est√° ativa, tentando reconectar...`);

      // Aguardar um pouco entre tentativas para n√£o sobrecarregar
      await new Promise(resolve => setTimeout(resolve, 2000));

      await reactivateSession(session);
    }

    console.log('‚úÖ Reconex√£o autom√°tica conclu√≠da');

  } catch (error) {
    console.error('‚ùå Erro na reconex√£o autom√°tica:', error);
  }
};
