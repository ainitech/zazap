import makeWASocket, { useMultiFileAuthState, fetchLatestBaileysVersion } from '@whiskeysockets/baileys';
import { Boom } from '@hapi/boom';
import qrcode from 'qrcode';
import fs from 'fs';

const sessions = {};

export async function createBaileysSession(sessionId, onQR, onReady, onMessage) {
  const { state, saveCreds } = await useMultiFileAuthState(`baileys_auth_${sessionId}`);
  const { version } = await fetchLatestBaileysVersion();
  const sock = makeWASocket({
    version,
    auth: state,
    printQRInTerminal: false, // Desabilitar QR no terminal
  });

  sock.ev.on('creds.update', saveCreds);
  
  sock.ev.on('connection.update', async ({ connection, lastDisconnect, qr }) => {
    if (qr && onQR) {
      try {
        console.log(`QR Code gerado para sess√£o Baileys ${sessionId}`);
        // Gerar QR Code como base64
        const qrCodeDataURL = await qrcode.toDataURL(qr);
        onQR(qrCodeDataURL);
      } catch (error) {
        console.error('Erro ao gerar QR Code:', error);
      }
    }
    
    if (connection === 'open' && onReady) {
      console.log(`Sess√£o Baileys ${sessionId} conectada e pronta`);
      onReady(sock);
    }
    
    if (connection === 'close') {
      const shouldReconnect = lastDisconnect?.error?.output?.statusCode !== 401;
      console.log(`Sess√£o Baileys ${sessionId} fechada:`, lastDisconnect?.error, ', deveria reconectar:', shouldReconnect);
      
      if (!shouldReconnect) {
        console.log(`Limpando sess√£o Baileys ${sessionId}`);
        cleanupBaileysSession(sessionId);
      }
    }
  });
  
  sock.ev.on('messages.upsert', ({ messages }) => {
    if (onMessage && messages && messages.length > 0) onMessage(messages[0], sock);
  });

  sessions[sessionId] = sock;
  return sock;
}

export function getBaileysSession(sessionId) {
  return sessions[sessionId];
}

export async function sendText(sessionId, to, text) {
  console.log(`üîç Buscando sess√£o Baileys: "${sessionId}"`);
  console.log(`üìã Sess√µes ativas dispon√≠veis:`, Object.keys(sessions));
  
  const sock = getBaileysSession(sessionId);
  if (!sock) {
    console.error(`‚ùå Sess√£o "${sessionId}" n√£o encontrada no Baileys`);
    console.error(`üìã Sess√µes dispon√≠veis:`, Object.keys(sessions));
    throw new Error(`Sess√£o "${sessionId}" n√£o encontrada no Baileys`);
  }
  
  console.log(`‚úÖ Sess√£o "${sessionId}" encontrada, enviando mensagem...`);
  return sock.sendMessage(to, { text });
}

export async function sendMedia(sessionId, to, buffer, mimetype) {
  const sock = getBaileysSession(sessionId);
  if (!sock) throw new Error('Sess√£o n√£o encontrada');
  return sock.sendMessage(to, { document: buffer, mimetype });
}

// Fun√ß√£o para limpar sess√£o Baileys
export function cleanupBaileysSession(sessionId) {
  const sock = sessions[sessionId];
  if (sock) {
    try {
      sock.end();
    } catch (error) {
      console.error(`Erro ao finalizar sess√£o Baileys ${sessionId}:`, error);
    }
    delete sessions[sessionId];
    
    // Limpar arquivos de autentica√ß√£o
    try {
      const authPath = `baileys_auth_${sessionId}`;
      if (fs.existsSync(authPath)) {
        fs.rmSync(authPath, { recursive: true });
        console.log(`Arquivos de autentica√ß√£o da sess√£o ${sessionId} removidos`);
      }
    } catch (error) {
      console.error(`Erro ao remover arquivos de auth da sess√£o ${sessionId}:`, error);
    }
    
    console.log(`Sess√£o Baileys ${sessionId} removida da mem√≥ria`);
  }
}

// Fun√ß√£o para desconectar sess√£o Baileys manualmente
export async function disconnectBaileysSession(sessionId) {
  const sock = getBaileysSession(sessionId);
  if (sock) {
    try {
      await sock.logout();
      cleanupBaileysSession(sessionId);
      return true;
    } catch (error) {
      console.error(`Erro ao desconectar sess√£o Baileys ${sessionId}:`, error);
      cleanupBaileysSession(sessionId);
      return false;
    }
  }
  return false;
}

// Fun√ß√£o para listar todas as sess√µes Baileys
export function listBaileysSessions() {
  return Object.keys(sessions);
}
